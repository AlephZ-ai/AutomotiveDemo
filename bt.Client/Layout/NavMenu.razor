@implements IDisposable

@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        @if (!SidebarCollapsed)
        {
        <a class="navbar-brand" href="">bt</a>
        }
    </div>
</div>

<div class="sidebar">
    <input type="checkbox" id="navbar-toggler" class="navbar-toggler" checked="@SidebarCollapsed" @onchange="OnSidebarCollapsedChanged" />
    <nav class="flex-column nav-scrollable">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span>
                @if (!SidebarCollapsed)
                {
                    <span class="nav-link-text">Home</span>
                }
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span>
                @if (!SidebarCollapsed)
                {
                    <span class="nav-link-text">Counter</span>
                }
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span>
                @if (!SidebarCollapsed)
                {
                    <span class="nav-link-text">Weather</span>
                }
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="auth">
                <span class="bi bi-lock-nav-menu" aria-hidden="true"></span>
                @if (!SidebarCollapsed)
                {
                    <span class="nav-link-text">Auth Required</span>
                }
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span>
                        @if (!SidebarCollapsed)
                        {
                            <span class="nav-link-text">Register</span>
                        }
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span>
                        @if (!SidebarCollapsed)
                        {
                            <span class="nav-link-text">Login</span>
                        }
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    [Parameter]
    public bool SidebarCollapsed { get; set; }

    [Parameter]
    public EventCallback<bool> SidebarCollapsedChanged { get; set; }

    private async Task OnSidebarCollapsedChanged(ChangeEventArgs e)
    {
        SidebarCollapsed = (bool)e.Value!;
        await SidebarCollapsedChanged.InvokeAsync(SidebarCollapsed);
    }
}
